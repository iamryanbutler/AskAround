const functions = require('firebase-functions');

// // Create and Deploy Your First Cloud Functions
// // https://firebase.google.com/docs/functions/write-firebase-functions
//
// exports.helloWorld = functions.https.onRequest((request, response) => {
//  response.send("Hello from Firebase!");
// });
// The Cloud Functions for Firebase SDK to create Cloud Functions and setup triggers.
// The Firebase Admin SDK to access the Firebase Realtime Database.
const admin = require('firebase-admin');
admin.initializeApp();

const auth = admin.auth();

/**
 * Gets all the users (1000 MAX) from Firebase auth.
 *
 * @param {Object} req Express Request Object.
 * @param {Object} res Express Response Object
 */
// const getAllUsers = (req, res) => {
//   const maxResults = 1; // optional arg.

//   auth.listUsers(maxResults).then((userRecords) => {
//     userRecords.users.forEach((user) => console.log(user.toJSON()));
//     res.end('Retrieved users list successfully.');
    
//   }).catch((error) => console.log(error));
// };

// module.exports = {
//   api: functions.https.onRequest(getAllUsers),
// };


// Take the text parameter passed to this HTTP endpoint and insert it into the
// Realtime Database under the path /messages/:pushId/original
exports.addMessage = functions.https.onRequest((req, res) => {
  // Grab the text parameter.
  const original = req.query.text;
  // Push the new message into the Realtime Database using the Firebase Admin SDK.
  return admin.database().ref('/messages').push({original: original}).then((snapshot) => {
    // Redirect with 303 SEE OTHER to the URL of the pushed object in the Firebase console.
    return res.redirect(303, snapshot.ref.toString());
  });
});

// Listens for new messages added to /messages/:pushId/original and creates an
// uppercase version of the message to /messages/:pushId/uppercase
exports.makeUppercase = functions.database.ref('/messages/{pushId}/original')
    .onCreate((snapshot, context) => {
      // Grab the current value of what was written to the Realtime Database.
      const original = snapshot.val();
      console.log('Uppercasing', context.params.pushId, original);
      const uppercase = original.toUpperCase();
      // You must return a Promise when performing asynchronous tasks inside a Functions such as
      // writing to the Firebase Realtime Database.
      // Setting an "uppercase" sibling in the Realtime Database returns a Promise.
      return snapshot.ref.parent.child('uppercase').set(uppercase);
    });


exports.createUser = functions.auth.user().onCreate(function(user, context) {
  return admin.database().ref("Users/" + user.uid).set({
      "Name": "Anonymous",
      "Rank": 0,
      "conWith" : "null",
      "curChat": "null",
      "curPostId": "null",
      "curPostType": "null",
    })
});

// exports.sendEmailNotification = functions.database.ref('/Posts/Mathematics/').onWrite(
//   async() => {
//     var user = firebase.auth().currentUser;
//     var email, name;
//     if(user != null){
//       displayName = user.displayName;
//       email = user.email;
//       return sendEmailNotification(email, displayName);
//     }
// });

// async function sendEmailNotification(email, displayName){
//   const mailOptions = {
//     from: 'AskAround <noreply@firebase.com>',
//     to: email,
//   };

//   mailOptions.subject = 'A new post has been created';
//   mailOptions.text = 'This is the description of the post';
//   await mailTransport.sendMail(mailOptions);
//   console.log('new email sent to:', email);
//   return null;
// }




require('dotenv').config();

const nodemailer = require('nodemailer');

//Step 1
let transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL,
        pass: process.env.PASSWORD
    }
});

//Step 2
let mailOptions = {
    from: 'askaroundlsu@gmail.com',
    to: 'askaroundlsu@gmail.com',
    subject: 'This email was generated by the AskAround Super AI',
    text: 'You just got hacked. get rekt.'
};

exports.sendMail = function(){
    transporter.sendMail(mailOptions, function(err, data){
        if(err)
            console.log('Error sending email: ', err);
        else 
            console.log('Email sent!! The data is ', data);
    });
}
